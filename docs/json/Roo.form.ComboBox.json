{
  "props": [
    {
      "name": "allQuery",
      "type": "String",
      "desc": "The text query to send to the server to return all records for the list with no filtering (defaults to '')",
      "memberOf": ""
    },
    {
      "name": "autoCreate",
      "type": "Boolean/Object",
      "desc": "A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})",
      "memberOf": ""
    },
    {
      "name": "blockFocus",
      "type": "bool",
      "desc": "Prevents all focus calls, so it can work with things like HTML edtor bar",
      "memberOf": ""
    },
    {
      "name": "disableClear",
      "type": "bool",
      "desc": "Disable showing of clear button.",
      "memberOf": ""
    },
    {
      "name": "displayField",
      "type": "String",
      "desc": "The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')",
      "memberOf": ""
    },
    {
      "name": "editable",
      "type": "Boolean",
      "desc": "False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)",
      "memberOf": ""
    },
    {
      "name": "forceSelection",
      "type": "Boolean",
      "desc": "True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)",
      "memberOf": ""
    },
    {
      "name": "grow",
      "type": "Boolean",
      "desc": "",
      "memberOf": ""
    },
    {
      "name": "growMax",
      "type": "Number",
      "desc": "",
      "memberOf": ""
    },
    {
      "name": "growMin",
      "type": "Number",
      "desc": "",
      "memberOf": ""
    },
    {
      "name": "handleHeight",
      "type": "Number",
      "desc": "The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)",
      "memberOf": ""
    },
    {
      "name": "hiddenName",
      "type": "String",
      "desc": "If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)",
      "memberOf": ""
    },
    {
      "name": "lazyRender",
      "type": "Boolean",
      "desc": "True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)",
      "memberOf": ""
    },
    {
      "name": "listAlign",
      "type": "String",
      "desc": "A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')",
      "memberOf": ""
    },
    {
      "name": "listClass",
      "type": "String",
      "desc": "CSS class to apply to the dropdown list element (defaults to '')",
      "memberOf": ""
    },
    {
      "name": "listWidth",
      "type": "Number",
      "desc": "The width in pixels of the dropdown list (defaults to the width of the ComboBox field)",
      "memberOf": ""
    },
    {
      "name": "loadingText",
      "type": "String",
      "desc": "The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')",
      "memberOf": ""
    },
    {
      "name": "maxHeight",
      "type": "Number",
      "desc": "The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)",
      "memberOf": ""
    },
    {
      "name": "minChars",
      "type": "Number",
      "desc": "The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)",
      "memberOf": ""
    },
    {
      "name": "minListWidth",
      "type": "Number",
      "desc": "The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)",
      "memberOf": ""
    },
    {
      "name": "mode",
      "type": "String",
      "desc": "Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)",
      "memberOf": ""
    },
    {
      "name": "pageSize",
      "type": "Number",
      "desc": "If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)",
      "memberOf": ""
    },
    {
      "name": "queryDelay",
      "type": "Number",
      "desc": "The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')",
      "memberOf": ""
    },
    {
      "name": "queryParam",
      "type": "String",
      "desc": "Name of the query as it will be passed on the querystring (defaults to 'query')",
      "memberOf": ""
    },
    {
      "name": "resizable",
      "type": "Boolean",
      "desc": "True to add a resize handle to the bottom of the dropdown list (defaults to false)",
      "memberOf": ""
    },
    {
      "name": "selectOnFocus",
      "type": "Boolean",
      "desc": "True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)",
      "memberOf": ""
    },
    {
      "name": "selectedClass",
      "type": "String",
      "desc": "CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')",
      "memberOf": ""
    },
    {
      "name": "shadow",
      "type": "Boolean/String",
      "desc": "True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right",
      "memberOf": ""
    },
    {
      "name": "store",
      "type": "Roo.data.Store",
      "desc": "The data store to which this combo is bound (defaults to undefined)",
      "memberOf": ""
    },
    {
      "name": "title",
      "type": "String",
      "desc": "If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)",
      "memberOf": ""
    },
    {
      "name": "tpl",
      "type": "String/Roo.Template",
      "desc": "The template to use to render the output",
      "memberOf": ""
    },
    {
      "name": "transform",
      "type": "String/HTMLElement/Element",
      "desc": "The id, DOM node or element of an existing select to convert to a ComboBox",
      "memberOf": ""
    },
    {
      "name": "triggerAction",
      "type": "String",
      "desc": "The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')",
      "memberOf": ""
    },
    {
      "name": "triggerClass",
      "type": "String",
      "desc": "An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended</b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).",
      "memberOf": ""
    },
    {
      "name": "typeAhead",
      "type": "Boolean",
      "desc": "True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)",
      "memberOf": ""
    },
    {
      "name": "typeAheadDelay",
      "type": "Number",
      "desc": "The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)",
      "memberOf": ""
    },
    {
      "name": "valueField",
      "type": "String",
      "desc": "The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.",
      "memberOf": ""
    },
    {
      "name": "valueNotFoundText",
      "type": "String",
      "desc": "When using a name/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)",
      "memberOf": ""
    }
  ],
  "events": [
    {
      "name": "beforequery",
      "sig": "function (combo, query, forceAll, cancel, e)\n{\n\n}",
      "type": "function",
      "desc": "Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:"
    },
    {
      "name": "beforeselect",
      "sig": "function (combo, record, index)\n{\n\n}",
      "type": "function",
      "desc": "Fires before a list item is selected. Return false to cancel the selection."
    },
    {
      "name": "collapse",
      "sig": "function (combo)\n{\n\n}",
      "type": "function",
      "desc": "Fires when the dropdown list is collapsed"
    },
    {
      "name": "expand",
      "sig": "function (combo)\n{\n\n}",
      "type": "function",
      "desc": "Fires when the dropdown list is expanded"
    },
    {
      "name": "select",
      "sig": "function (combo, record, index)\n{\n\n}",
      "type": "function",
      "desc": "Fires when a list item is selected"
    }
  ]
}